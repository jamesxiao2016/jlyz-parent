<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util-4.0.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
	http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
	http://www.springframework.org/schema/jee
	http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
	http://www.springframework.org/schema//data/jpa
	http://www.springframework.org/schema/data/jpa/spring-jpa-4.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="cn.dlbdata.dj" />
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>
	<bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" abstract="true">
		<property name="driverClass" value="${pool.driverClass}" />
		<!-- <property name="jdbcUrl" value="${pool.url}" /> <property name="user" 
			value="${pool.username}" /> <property name="password" value="${pool.password}" 
			/> -->
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${pool.initialPoolSize}"></property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="${pool.minPoolSize}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${pool.maxPoolSize}"></property>
		<!--每30秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${pool.idleConnectionTestPeriod}"></property>
		<!-- 最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0； -->
		<property name="maxIdleTime" value="${pool.maxIdleTime}" />

		<!--当连接池中的连接用完时，C3P0一次性创建新连接的数目 -->
		<property name="acquireIncrement" value="10" />
		<!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30 -->
		<property name="acquireRetryAttempts" value="100" />
		<!-- 两次连接中间隔时间，单位毫秒，默认为1000 -->
		<property name="acquireRetryDelay" value="1000" />
		<!-- 连接关闭时默认将所有未提交的操作回滚。默认为false -->
		<property name="autoCommitOnClose" value="false" />
		<!-- 获取连接失败将会引起所有等待获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调 用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认为 
			false； -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒，默认为0； -->
		<property name="checkoutTimeout" value="0" />

		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量。但由于预缓存的Statement属 于单个Connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素，如果maxStatements与 
			maxStatementsPerConnection均为0，则缓存被关闭。默认为0； -->
		<property name="maxStatements" value="0" />
		<!-- 连接池内单个连接所拥有的最大缓存Statement数。默认为0； -->
		<property name="maxStatementsPerConnection" value="0" />
		<!--C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能，通过多线程实现多个操作同时被执行。默认为3； -->
		<property name="numHelperThreads" value="3" />
		<!-- 用户修改系统配置参数执行前最多等待的秒数。默认为300； -->
		<property name="propertyCycle" value="600" />
	</bean>
	<!-- 配置数据源 -->
	<bean id="masterDataSource" parent="parentDataSource">
		<property name="jdbcUrl" value="${master.jdbc.url}" />
		<property name="user" value="${master.jdbc.username}" />
		<property name="password" value="${master.jdbc.password}" />
		<property name="initialPoolSize" value="${master.pool.initialPoolSize}"></property>
		<property name="minPoolSize" value="${master.pool.minPoolSize}"></property>
		<property name="maxPoolSize" value="${master.pool.maxPoolSize}"></property>
	</bean>

	<bean id="slaveDataSource" parent="parentDataSource">
		<property name="jdbcUrl" value="${slave.jdbc.url}" />
		<property name="user" value="${slave.jdbc.username}" />
		<property name="password" value="${slave.jdbc.password}" />
		<property name="initialPoolSize" value="${slave.pool.initialPoolSize}"></property>
		<property name="minPoolSize" value="${slave.pool.minPoolSize}"></property>
		<property name="maxPoolSize" value="${slave.pool.maxPoolSize}"></property>
	</bean>

	<!--动态数据源 -->
	<bean id="dataSource" class="cn.dlbdata.dj.common.core.db.DynamicRouteDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="master" value-ref="masterDataSource" />
				<entry key="slave" value-ref="slaveDataSource" />
			</map>
		</property>
		<!-- 默认目标数据源为主库数据源 -->
		<property name="defaultTargetDataSource" ref="masterDataSource" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property><!-- 配置mybatis的日志记录 -->
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:cn/dlbdata/*/db/mapper/*.xml"></property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							helperDialect=mysql
							reasonable=false
							supportMethodsArguments=true
							params=count=countSql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.dlbdata.dj.db.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<aop:aspectj-autoproxy />
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="audit*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="fetch*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="modify*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="remove*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="redo*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="upload*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="commit*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="complete*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="fail*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED"
					   rollback-for="cn.dlbdata.dj.common.core.exception.BusinessException"/>
		</tx:attributes>
	</tx:advice>

	<!--只对业务逻辑层开启事务-->
	<aop:config expose-proxy="true">
		<aop:pointcut id="txPointcut" expression="execution(* cn.dlbdata.dj.service..*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
</beans> 